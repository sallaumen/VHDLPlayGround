LIBRARY IEEE;
USE ieee.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.numeric_bit.all;
use ieee.math_real.all;

Entity calc_rpn IS
	generic (
		NUM_VALUE_POSITIONS : integer := 4;
		INPUT_SIZE : integer := 3;
		-- Debounce timer
		MIN_VALUE : integer := 0;
		MAX_VALUE : integer := 1000;
		BT_OFF: std_logic := '1';
		BT_ON: std_logic := '0'
	);
	port(		
		-- Clock and reset
		clk, rst: IN std_logic;
		enter_button, input_button_inc, input_button_dec: IN std_logic;
		
		input_operation_SUM: IN std_logic;
	   input_operation_SUB: IN std_logic;
	   input_operation_MULT: IN std_logic;
	   input_operation_DIV: IN std_logic;
		
		-- Quantidade de bits necessários para representar a saída no numero de displays.
		output_value_displayed : OUT std_logic_vector((integer(floor(log10(real((MAX_VALUE))))+real(1))*8)-1 downto 0)
	);
END entity;

Architecture arch OF calc_rpn IS
	
	COMPONENT debouncer
		PORT(clk_debounce, rst_debounce, generic_input_debounce: in std_logic; output_debounce: out std_logic);
	END COMPONENT;
	
	signal output_button_dec: std_logic;
	signal output_button_inc: std_logic;
	signal output_button_enter: std_logic;
	
	signal output_key_SUM: std_logic;
	signal output_key_SUB: std_logic;
	signal output_key_MULT: std_logic;
	signal output_key_DIV: std_logic;

	
BEGIN
	
	button_dec: debouncer port map (clk_debounce => clk, rst_debounce => rst, generic_input_debounce => input_button_dec, output_debounce => output_button_dec);
	button_inc: debouncer port map (clk_debounce => clk, rst_debounce => rst, generic_input_debounce => input_button_inc, output_debounce => output_button_inc);
	button_enter: debouncer port map (clk_debounce => clk, rst_debounce => rst, generic_input_debounce => enter_button, output_debounce => output_button_enter);
	
	key_sum: debouncer port map (clk_debounce => clk, rst_debounce => rst, generic_input_debounce => input_operation_SUM, output_debounce => output_key_SUM);
	key_sub: debouncer port map (clk_debounce => clk, rst_debounce => rst, generic_input_debounce => input_operation_SUB, output_debounce => output_key_SUB);
	key_mult: debouncer port map (clk_debounce => clk, rst_debounce => rst, generic_input_debounce => input_operation_MULT, output_debounce => output_key_MULT);
	key_div: debouncer port map (clk_debounce => clk, rst_debounce => rst, generic_input_debounce => input_operation_DIV, output_debounce => output_key_DIV);
	
	process(clk, rst)
		variable num_disp: integer := (integer(floor(log10(real((MAX_VALUE))))+real(1)));
		variable displays_output: std_logic_vector((integer(floor(log10(real((MAX_VALUE))))+real(1))*8)-1 downto 0);
		variable output_value: integer := 0;
		type INT_ARRAY is array (integer range <>) of integer;
		variable stack: INT_ARRAY(0 to NUM_VALUE_POSITIONS-1);
		variable stack_actual_size: integer := 0;
		--
		--	 output_button_dec:		 0;
		--	 output_button_inc:		 1;
		--	 output_button_enter:	 2;
		--	 output_key_SUM:		 	 3;
		--	 output_key_SUB: 		 	 4;
		--	 output_key_MULT: 		 5;
		--	 output_key_DIV: 			 6;
		variable previous_bt_state_vec: std_logic_vector(6 downto 0) := "1111111";
		-------------------------------------
		begin
			if rst = '0' then
				for i in 0 to NUM_VALUE_POSITIONS-1 loop
					stack(i) := 0;
				end loop;
				output_value := 0;
				previous_bt_state_vec := "1111111";
				stack_actual_size := 0;
				
			elsif rising_edge(clk) then
				------ component: incrementa /decrementa output_value
				if output_button_dec = BT_ON and previous_bt_state_vec(0) = BT_OFF and output_value > MIN_VALUE then
					output_value := output_value-1;
					previous_bt_state_vec(0) := BT_ON;
				elsif output_button_dec = BT_OFF then
					previous_bt_state_vec(0) := BT_OFF;
				end if;
				
				if output_button_inc = BT_ON and previous_bt_state_vec(1) = BT_OFF and output_value < MAX_VALUE then
					output_value := output_value+1;
					previous_bt_state_vec(1) := BT_ON;
				elsif output_button_inc = BT_OFF then
					previous_bt_state_vec(1) := BT_OFF;
				end if;
				----------------------------------------------	
				
				------ component: stack push
				if output_button_enter = BT_ON and previous_bt_state_vec(2) = BT_OFF then
					stack := output_value & stack(1 to NUM_VALUE_POSITIONS-1) ;
					output_value := 0;
					if stack_actual_size < 4 then
						stack_actual_size := stack_actual_size+1;
					end if;
				elsif output_button_enter = BT_OFF then
					previous_bt_state_vec(2) := BT_OFF;
				end if;
				----------------------------------------------
				
				------ component: operacoes
				-- soma
				if stack_actual_size > 1 then
					if output_key_SUM = BT_ON and previous_bt_state_vec(3) = BT_OFF then
						-- action
						if stack(1)+stack(0) < MAX_VALUE then
							output_value := stack(1)+stack(0);
							stack_actual_size := stack_actual_size-2;
							stack := stack(2 to NUM_VALUE_POSITIONS-1) & 0 & 0;
						end if;
					elsif output_key_SUM = BT_OFF then
						previous_bt_state_vec(3) := BT_OFF;
					end if;
					-- subtracao
					if output_key_SUB = BT_ON and previous_bt_state_vec(4) = BT_OFF then
						-- action
						if stack(1)-stack(0) > MIN_VALUE then
							output_value := stack(1)-stack(0);
							stack_actual_size := stack_actual_size-2;
							stack := stack(2 to NUM_VALUE_POSITIONS-1) & 0 & 0;
						end if;
					elsif output_key_SUB = BT_OFF then
						previous_bt_state_vec(4) := BT_OFF;
					end if;
					-- multiplicacao
					if output_key_MULT = BT_ON and previous_bt_state_vec(5) = BT_OFF then
						-- action
						if stack(1)*stack(0) < MAX_VALUE then
							output_value := stack(1)*stack(0);
							stack_actual_size := stack_actual_size-2;
							stack := stack(2 to NUM_VALUE_POSITIONS-1) & 0 & 0;
						end if;
					elsif output_key_MULT = BT_OFF then
						previous_bt_state_vec(5) := BT_OFF;
					end if;
					-- divisao
					if output_key_DIV = BT_ON and previous_bt_state_vec(6) = BT_OFF then
						-- action
						if stack(0) /= 0 then
							output_value := stack(1)/stack(0);
							stack_actual_size := stack_actual_size-2;
							stack := stack(2 to NUM_VALUE_POSITIONS-1) & 0 & 0;
						end if;
					elsif output_key_DIV = BT_OFF then
						previous_bt_state_vec(6) := BT_OFF;
					end if;
				end if;
				----------------------------------------------
				------ SHOW DISPLAY
				for i in 0 to (num_disp-1) loop
					if ((output_value/10**i) rem 10) = 0 then
						displays_output(((i+1)*8)-1 downto i*8) := "11000000";
					elsif ((output_value/10**i) rem 10) = 1 then
						displays_output(((i+1)*8)-1 downto i*8) := "11111001";
					elsif ((output_value/10**i) rem 10) = 2 then
						displays_output(((i+1)*8)-1 downto i*8) := "10100100";
					elsif ((output_value/10**i) rem 10) = 3 then
						displays_output(((i+1)*8)-1 downto i*8) := "10110000";
					elsif ((output_value/10**i) rem 10) = 4 then
						displays_output(((i+1)*8)-1 downto i*8) := "10011001";
					elsif ((output_value/10**i) rem 10) = 5 then
						displays_output(((i+1)*8)-1 downto i*8) := "10010010";
					elsif ((output_value/10**i) rem 10) = 6 then
						displays_output(((i+1)*8)-1 downto i*8) := "10000010";
					elsif ((output_value/10**i) rem 10) = 7 then
						displays_output(((i+1)*8)-1 downto i*8) := "11111000";
					elsif ((output_value/10**i) rem 10) = 8 then
						displays_output(((i+1)*8)-1 downto i*8) := "10000000";
					elsif ((output_value/10**i) rem 10) = 9 then
						displays_output(((i+1)*8)-1 downto i*8) := "10010000";
					end if;
				end loop;
				----------------------------------------------
			end if;
		output_value_displayed <= displays_output;
	end process; 
END Architecture;